"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[716],{4542:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"futureWork","title":"Future Work","description":"The current Nimbus implementation provides a focused solution for deploying specific types of NLP models to AWS serverless infrastructure. Based on this existing foundation, several technical directions could be explored to extend its functionality and address potential limitations.","source":"@site/docs/futureWork.md","sourceDirName":".","slug":"/futureWork","permalink":"/docs/futureWork","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"futureWork","sidebar_label":"6. Future Work","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"5. Trade-offs & Challenges","permalink":"/docs/tradeoffs"},"next":{"title":"Walkthrough","permalink":"/docs/walkthrough"}}');var t=i(4848),s=i(8453);const r={id:"futureWork",sidebar_label:"6. Future Work",sidebar_position:6},l="Future Work",d={},a=[{value:"Expanded Model Compatibility",id:"expanded-model-compatibility",level:2},{value:"Cloud-Agnostic Deployment",id:"cloud-agnostic-deployment",level:2},{value:"Function-Specific Endpoints",id:"function-specific-endpoints",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"future-work",children:"Future Work"})}),"\n",(0,t.jsx)(n.p,{children:"The current Nimbus implementation provides a focused solution for deploying specific types of NLP models to AWS serverless infrastructure. Based on this existing foundation, several technical directions could be explored to extend its functionality and address potential limitations."}),"\n",(0,t.jsx)(n.h2,{id:"expanded-model-compatibility",children:"Expanded Model Compatibility"}),"\n",(0,t.jsx)("figure",{children:(0,t.jsx)("img",{src:"/img/extentions.png",className:"image",alt:"Multiple model types image",width:"70%"})}),"\n",(0,t.jsx)(n.p,{children:"To expand Nimbus's utility beyond its current spaCy focus, future work could include support for a wider variety of popular NLP and ML models. This would involve enhancing Nimbus to handle different libraries, runtimes, and serialization formats. Key areas for expanded compatibility include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Hugging Face ",(0,t.jsx)(n.code,{children:"transformers"}),":"]})," Supporting deployment of readily available pre-trained or fine-tuned models, especially focusing on efficient and task-specific architectures suitable for serverless deployment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scikit-learn Models:"})," Enabling users to deploy models built with Scikit-learn, commonly used for efficient text classification, clustering, and feature extraction."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom TensorFlow Models:"})," Allowing deployment of user-trained NLP models developed using TensorFlow (typically saved in SavedModel ",(0,t.jsx)(n.code,{children:".pb"})," format)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom PyTorch Models:"})," Providing support for deploying user-trained NLP models developed using PyTorch (usually saved as ",(0,t.jsx)(n.code,{children:".pt"})," files)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ONNX Models:"})," Accommodating models converted to the Open Neural Network Exchange (",(0,t.jsx)(n.code,{children:".onnx"}),") format, which can offer performance benefits and framework interoperability."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Generic Serialized Objects (",(0,t.jsx)(n.code,{children:".pkl"}),"):"]})," Supporting models or pipelines saved using Python's pickle format, common for Scikit-learn but also potentially used for other custom Python objects (while acknowledging standard security/compatibility considerations)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Supporting these diverse model types would necessitate implementing flexible runtime environments within Nimbus (e.g., via adaptable Docker images and build strategies) capable of handling varied dependencies and loading multiple model formats."}),"\n",(0,t.jsx)(n.h2,{id:"cloud-agnostic-deployment",children:"Cloud-Agnostic Deployment"}),"\n",(0,t.jsx)(n.p,{children:"Currently, Nimbus deploys exclusively on Amazon Web Services (AWS). One change we would like to make in the future is to remove the vendor lock-in and enable users to deploy their AI models and expose endpoints across a wider range of cloud providers."}),"\n",(0,t.jsx)(n.p,{children:"Achieving this would require a reworking of the current infrastructure layer, which utilizes AWS CDK (Cloud Development Kit) . To support multi-cloud deployments, we would likely adopt a more flexible Infrastructure-as-Code (IaC) solution such as Terraform, which is widely regarded as an industry standard for provisioning cloud services."}),"\n",(0,t.jsx)(n.p,{children:"This improvement would open up Nimbus to additional cloud environments such as Google Cloud Platform (GCP), Microsoft Azure, or even on-premises infrastructure, while reducing the long-term risks associated with changes or limitations introduced by any single cloud provider."}),"\n",(0,t.jsx)(n.h2,{id:"function-specific-endpoints",children:"Function-Specific Endpoints"}),"\n",(0,t.jsx)("figure",{children:(0,t.jsx)("img",{src:"/img/futureWork_v2.png",className:"image",alt:"multiple endpoints image",width:"90%"})}),"\n",(0,t.jsxs)(n.p,{children:["Expanding Nimbus to support multiple, function-specific endpoints in a single deployment would empower users to expose discrete model operations, rather than the monolithic ",(0,t.jsx)(n.code,{children:"/predict"})," route. For example, one might deploy distinct paths such as ",(0,t.jsx)(n.code,{children:"/ner"})," for named\u2011entity recognition or ",(0,t.jsx)(n.code,{children:"/tokenize"})," for preprocessing, allowing users to invoke only the pipeline component they need. By scoping each endpoint to a specific Lambda handler, one can minimize HTTP payloads and latency, since requests and responses carry only the relevant data."]}),"\n",(0,t.jsx)(n.p,{children:"From an implementation standpoint, this will require:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CDK Enhancements:"})," Register additional HTTP routes and integrate them with their corresponding Lambda functions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CLI Extensions:"})," Provide commands for users to define and annotate custom endpoints in their local state file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handler Refactoring:"})," Modularize pipeline components into standalone functions that can be invoked independently."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Together, these changes would give teams finer\u2011grained control over their deployed models, improve performance for high\u2011throughput use cases, and pave the way for richer model\u2011service architectures in Nimbus."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var o=i(6540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);